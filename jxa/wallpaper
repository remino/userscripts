#!/usr/bin/env osascript -l JavaScript
// vim: ft=javascript

// SEE "JXA Cookbook"
// https://github.com/JXA-Cookbook/JXA-Cookbook/wiki

const E_MISSING_FILE = 16

const getEnv = key => $.getenv(key)
const homeDir = () => getEnv('HOME')
const fileExists = file => $.NSFileManager.defaultManager.fileExistsAtPath(file)
const log = (...args) => console.log(...args)
const IMAGE_FILE_EXTS = ['avif', 'jpg', 'png']

const pathExtension = path => ObjC.deepUnwrap($.NSString.stringWithString(path).pathExtension)

const directoryHasImageFiles = dir => {
	const fm = $.NSFileManager.defaultManager
	const files = fm.contentsOfDirectoryAtPathError(dir, null)
	const filesArray = ObjC.deepUnwrap(files)
	return filesArray.some(file => IMAGE_FILE_EXTS.includes(pathExtension(file)))
}

const errorBox = (app, msg) => {
	app.displayAlert(msg)
	log(msg)
}

const fatal = (app, code, msg) => {
	errorBox(app, msg)
	$.exit(code)
}

const isDirectory = file => {
	const isDir = Ref()
	$.NSFileManager.defaultManager.fileExistsAtPathIsDirectory(file, isDir)
	return isDir[0]
}

const pickRandomFileInDirectory = (dir, validExts) => {
	const fm = $.NSFileManager.defaultManager
	const files = fm.contentsOfDirectoryAtPathError(dir, null)
	const filesArray = ObjC.deepUnwrap(files)
	const validFiles = filesArray.filter(file => validExts.includes(pathExtension(file)))
	const randomIndex = Math.floor(Math.random() * validFiles.length)
	return validFiles[randomIndex]
}

const pickRandomImageInDirectory = dir => pickRandomFileInDirectory(dir, IMAGE_FILE_EXTS)

const requireFile = (app, file) => {
	if (fileExists(file)) return
	fatal(app, E_MISSING_FILE, `File does not exist at path: ${filePath}`)
}

const setDesktopPictureFromFile = (desktop, file) => {
	const result = desktop.picture.set(file)
	if (result) return file
	return result
}

const setDesktopPictureFromPath = (desktop, file) => {
	if (!isDirectory(file)) return setDesktopPictureFromFile(desktop, file)

	if (!directoryHasImageFiles(file)) {
		log(`No image files found in directory ${file}`)
		return
	}

	const randomImage = `${file}/${pickRandomImageInDirectory(file)}`
	const result = setDesktopPictureFromFile(desktop, randomImage)

	desktop.picturesFolder.set(file)
	desktop.randomOrder.set(true)
	desktop.changeInterval.set(5 * 60) // 5 minutes

	return result
}

const setAllDesktops = app => {
	log('Setting desktops')

	app.desktops().forEach(desktop => {
		const name = desktop.name()

		const filePaths = [
			`${homeDir()}/.config/wallpaper/images/${name}`,
			`${homeDir()}/.config/wallpaper/images/default`,
		]

		const file = filePaths.find(fileExists)

		if (!file) {
			log(`No image file found for ${name}`)
			return
		}

		const result = setDesktopPictureFromPath(desktop, file)

		log(`${name} ${result}`)
	})
}

function run(argv) {
	ObjC.import('stdlib')

	const app = Application('System Events')
	app.includeStandardAdditions = true

	setAllDesktops(app)

	$.exit(0)
}
